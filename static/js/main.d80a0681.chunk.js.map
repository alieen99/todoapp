{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","stores/SelectModel.js","stores/SelectStore.js","components/Show.js","components/Footer.js","components/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","isComplete","id","isShown","this","observable","action","todos","push","lastID","showState","i","x","length","sample","slice","map","todo","a","removeElement","clearComplete","toggle_second","show","hide","TodoEntry","state","value","handleKeyDown","event","keyCode","preventDefault","addTodo","setState","className","onChange","target","onKeyDown","type","placeholder","Component","TodoItem","observer","props","toggle","checked","onClick","SelectModel","isSelected","name","storeSelect","select","showAll","showActive","showComplete","Show","Footer","counter","clearCompletes","TodoItems","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d80a0681.chunk.js","sourcesContent":["import {observable, action} from \"mobx\";\r\n\r\nclass TodoModel {\r\n    @observable store\r\n    @observable id\r\n    @observable title\r\n    @observable isComplete\r\n    @observable isShown\r\n\r\n    constructor(store, title, isComplete, id,isShown) {\r\n        this.title = title\r\n        this.isComplete = isComplete\r\n        this.id = id\r\n        this.store = store\r\n        this.isShown = isShown\r\n    }\r\n\r\n    @action\r\n    toggle() {\r\n        this.isComplete = !this.isComplete\r\n    }\r\n    @action\r\n    toggle_second(){\r\n        this.isShown = !this.isShown\r\n    }\r\n\r\n    @action\r\n    hide(){\r\n        this.isShown = false\r\n    }\r\n    @action\r\n    show(){\r\n        this.isShown = true\r\n    }\r\n}\r\n\r\nexport default TodoModel","import {action, observable} from \"mobx\";\r\nimport TodoModel from \"./TodoModel\"\r\nimport todo from \"./TodoModel\";\r\n\r\nclass TodoStore {\r\n\r\n    @observable todos = []\r\n    @observable lastID = 0\r\n    @observable showState =true\r\n\r\n\r\n    @action\r\n    addTodo(title) {\r\n        this.todos.push(new TodoModel(this, title, false, this.lastID++,this.showState))\r\n    }\r\n\r\n    @action\r\n    removeElement(i) {\r\n        let x = this.todos.length\r\n        const sample = this.todos\r\n        this.todos = sample.slice(0, i)\r\n        this.lastID = i\r\n        sample.slice(i + 1, x).map(todo => {\r\n            this.todos.push(new TodoModel(this, todo.title, todo.isComplete, this.lastID++,todo.isShown))\r\n\r\n        })\r\n\r\n    }\r\n\r\n    @action\r\n    clearComplete() {\r\n        for(let a = 0 ; a < this.todos.length ; a++){\r\n            if(this.todos[a].isComplete === true){\r\n                this.removeElement(this.todos[a].id)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @action\r\n    clearCompletes() {\r\n        let x = this.todos.length\r\n        for(let a = 0 ; a < x ; a++){\r\n            this.clearComplete()\r\n        }\r\n\r\n    }\r\n\r\n    @action\r\n    showAll(){\r\n        this.todos.map(todo => {\r\n            if (todo.isShown === false) todo.toggle_second()\r\n        })\r\n        this.showState =true\r\n\r\n        }\r\n\r\n    @action\r\n    showActive(){\r\n        this.todos.map(todo =>{\r\n            if (todo.isComplete === false) todo.show()\r\n            else todo.hide()\r\n        })\r\n        this.showState =true\r\n\r\n    }\r\n\r\n    @action\r\n    showComplete(){\r\n        this.todos.map(todo =>{\r\n            if (todo.isComplete === true) todo.show()\r\n            else todo.hide()\r\n        })\r\n        this.showState = false\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nconst store = new TodoStore()\r\nexport default store","import React , {Component} from \"react\";\r\nimport store from \"../stores/TodoStore\";\r\n\r\nclass TodoEntry extends Component{\r\n    state = {\r\n        value : \"\"\r\n    };\r\n\r\n    handleKeyDown = event =>{\r\n        if(event.keyCode !== 13){\r\n            return;\r\n        }\r\n        event.preventDefault()\r\n        store.addTodo(this.state.value)\r\n        this.setState({value : \"\"})\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <header className=\"header\">\r\n                <h1>ToDo</h1>\r\n                <input\r\n                    value={this.state.value}\r\n                    onChange={event => this.setState({value: event.target.value})}\r\n                    onKeyDown={event => this.handleKeyDown(event)}\r\n                    type=\"text\"\r\n                    className=\"new-todo\"\r\n                    placeholder=\"What needs to be done?\"\r\n                />\r\n            </header>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default TodoEntry","import React , {Component} from \"react\";\r\nimport {observer} from \"mobx-react\";\r\nimport store from \"../stores/TodoStore\";\r\n\r\n\r\n@observer\r\nclass TodoItem extends Component{\r\n\r\n    render() {\r\n        const { todo } = this.props\r\n\r\n            return(\r\n                <li className={todo.isComplete? \"completed\" :\" \"}>\r\n                    <div className={todo.isShown?\"view\":\"hidden\"}>\r\n                        <input onChange={()=>{todo.toggle()}} type=\"checkbox\" className=\"toggle\" value=\"on\" checked={todo.isComplete}/>\r\n                        <label> {todo.title} </label>\r\n                        <button onClick={()=>{store.removeElement(todo.id)}} className=\"destroy\"/>\r\n\r\n                    </div>\r\n\r\n                </li>\r\n\r\n            )\r\n\r\n\r\n    }\r\n}\r\nexport default TodoItem","import {observable, action} from \"mobx\";\r\n\r\nclass SelectModel {\r\n    @observable store\r\n    @observable id\r\n    @observable name\r\n    @observable isSelected\r\n\r\n    constructor(store, id, isSelected,name) {\r\n        this.store = store\r\n        this.id = id\r\n        this.name = name\r\n        this.isSelected =isSelected\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default SelectModel","import {observable, action} from \"mobx\";\r\nimport SelectModel from \"./SelectModel\";\r\nimport store from \"./TodoStore\";\r\n\r\nclass SelectStore {\r\n    @observable select = [\r\n        new SelectModel(this, 0, true, \"All\"),\r\n        new SelectModel(this, 1, false, \"Active\"),\r\n        new SelectModel(this, 2, false, \"Completed\")\r\n    ]\r\n\r\n    @action\r\n    toggle(i) {\r\n\r\n       if(this.select[i].isSelected === false){\r\n           this.select[i].isSelected =true\r\n           for(let a = 0 ; a < 3 ; a++){\r\n               if(a !== i){\r\n                   this.select[a].isSelected =false\r\n               }\r\n           }\r\n       }\r\n\r\n        if (this.select[0].isSelected === true){store.showAll()}\r\n        if (this.select[1].isSelected === true){store.showActive()}\r\n        if (this.select[2].isSelected === true){store.showComplete()}\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nconst storeSelect = new SelectStore()\r\nexport default storeSelect","import React , {Component} from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport store from \"../stores/TodoStore\"\r\nimport {observer} from \"mobx-react\";\r\nimport Footer from \"./Footer\";\r\nimport storeSelect from \"../stores/SelectStore\";\r\n\r\n@observer\r\nclass Show extends Component{\r\n    render() {\r\n        const {select} = this.props\r\n\r\n        return(\r\n            <li><a onClick={()=>storeSelect.toggle(select.id)} className={select.isSelected? \"selected\" :\" \"}>{select.name}</a></li>\r\n        )\r\n    }\r\n}\r\nexport default Show","import React , {Component} from \"react\";\r\nimport {observer} from \"mobx-react\";\r\nimport store from \"../stores/TodoStore\";\r\nimport Show from \"./Show\";\r\nimport storeSelect from \"../stores/SelectStore\";\r\n\r\n@observer\r\nclass Footer extends Component{\r\n\r\n    render() {\r\n            let counter = 0\r\n            for (let a = 0; a < store.todos.length ; a++){\r\n                if (store.todos[a].isComplete === false){\r\n                    counter++\r\n                }\r\n            }\r\n\r\n        return(\r\n            <div className=\"footer\">\r\n                <div className=\"todo-count\">{counter} Items left</div>\r\n                <ul className=\"filters\">\r\n                    {\r\n                        storeSelect.select.map(select =>{\r\n                            return(\r\n                                <Show select={select}/>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n                <div onClick={()=>store.clearCompletes()} className=\"clear-completed\">Clear completed</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    active() {\r\n\r\n    }\r\n}\r\nexport default Footer","import React , {Component} from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport store from \"../stores/TodoStore\"\r\nimport {observer} from \"mobx-react\";\r\nimport Footer from \"./Footer\";\r\n\r\n@observer\r\nclass TodoItems extends Component{\r\n    render() {\r\n        return(\r\n            <section className=\"main\">\r\n                <ul className=\"todo-list\">\r\n                    {\r\n                        store.todos.map(todo =>{\r\n\r\n                            return(\r\n                                <TodoItem todo={todo}/>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </ul>\r\n                <Footer/>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nexport default TodoItems","import React, {Component} from 'react';\nimport './App.css';\nimport TodoEntry from \"./components/TodoEntry\";\nimport TodoItems from \"./components/TodoItems\";\n\nimport {observer} from \"mobx-react\";\nimport Footer from \"./components/Footer\";\n\n@observer\nclass App extends Component{\n  render() {\n    return (\n          <div id=\"todoapp\" className=\"todoapp\">\n            <TodoEntry/>\n            <TodoItems/>\n\n          </div>\n\n    );\n  }\n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}